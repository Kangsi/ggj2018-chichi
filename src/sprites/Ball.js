import Phaser from 'phaser'import Sprite from '../services/Sprite';const dragCoefficient = 6000;const amplitude = 20;export default class Ball extends Sprite {  constructor({ asset, x, y, frame, anchorX = 0, anchorY = 0, inputEnabled = true }) {    super({ asset, x, y, frame, anchorX, anchorY, inputEnabled});    game.physics.arcade.enable(this);    this.body.collideWorldBounds = true;    this.body.bounce.set(0.9);    this.body.setCircle(this.width / 2);    this.body.drag = new Phaser.Point(4000, 4000)    this.inputEnabled = true;    this.input.enableDrag();    this.scale.setTo(2, 2);    this.positionArray = [      {x: 0, y: 0},      {x: 0, y: 0}    ];    this.events.onDragStop.add(this.stopDrag.bind(this));  }  update () {    this.positionArray.shift();    this.positionArray.push({ x: this.x, y: this.y });    this.body.drag = this.calculateVelocityAbsolute().normalize().multiply(dragCoefficient, dragCoefficient);  }  stopDrag () {    this.body.velocity = this.calculateVelocity();  }  calculateVelocity () {    return new Phaser.Point((this.positionArray[1].x - this.positionArray[0].x) * amplitude, (this.positionArray[1].y - this.positionArray[0].y)*amplitude);  }  calculateVelocityAbsolute () {    return new Phaser.Point(Math.abs((this.positionArray[1].x - this.positionArray[0].x) * amplitude), Math.abs((this.positionArray[1].y - this.positionArray[0].y)*amplitude));  }  render () {    game.debug.body(this);  }}